# Generated by Django 4.2.19 on 2025-02-28 18:36

import uuid

import django.core.serializers.json
import django.core.validators
import django.db.models.deletion
import nautobot.core.models.fields
import nautobot.extras.models.mixins
import nautobot.extras.models.statuses
from django.db import migrations, models

import nautobot_igp_models.models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("extras", "0114_computedfield_grouping"),
        ("dcim", "0062_module_data_migration"),
        ("ipam", "0047_alter_ipaddress_role_alter_ipaddress_status_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="IGPInstance",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("protocol", models.CharField(max_length=4)),
                (
                    "isis_area",
                    models.CharField(
                        blank=True,
                        max_length=13,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="ISIS Area must be in the format '49', '49.0001', etc., with 1-7 segments of 1-4 digits each.",
                                regex="^(\\d{1,4})(\\.\\d{1,4}){0,6}$",
                            ),
                            nautobot_igp_models.models.validate_isis_area,
                        ],
                    ),
                ),
                (
                    "device",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="igp_instances", to="dcim.device"
                    ),
                ),
                ("router_id", models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to="ipam.ipaddress")),
                (
                    "status",
                    nautobot.extras.models.statuses.StatusField(
                        on_delete=django.db.models.deletion.PROTECT, to="extras.status"
                    ),
                ),
                ("tags", nautobot.core.models.fields.TagsField(through="extras.TaggedItem", to="extras.Tag")),
                (
                    "vrf",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to="ipam.vrf"
                    ),
                ),
            ],
            options={
                "verbose_name": "IGP Instance",
                "verbose_name_plural": "IGP Instances",
                "unique_together": {("device", "protocol", "vrf")},
            },
            bases=(
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="ISISConfiguration",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("system_id", models.CharField(max_length=19, unique=True)),
                (
                    "instance",
                    models.ForeignKey(
                        limit_choices_to={"protocol": "ISIS"},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="isis_configurations",
                        to="nautobot_igp_models.igpinstance",
                    ),
                ),
                (
                    "status",
                    nautobot.extras.models.statuses.StatusField(
                        on_delete=django.db.models.deletion.PROTECT, to="extras.status"
                    ),
                ),
                ("tags", nautobot.core.models.fields.TagsField(through="extras.TaggedItem", to="extras.Tag")),
            ],
            options={
                "verbose_name": "ISIS Configuration",
                "verbose_name_plural": "ISIS Configurations",
            },
            bases=(
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="OSPFConfiguration",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("area", models.CharField(max_length=15)),
                ("process_id", models.PositiveIntegerField(default=1)),
                (
                    "instance",
                    models.ForeignKey(
                        limit_choices_to={"protocol": "OSPF"},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ospf_configurations",
                        to="nautobot_igp_models.igpinstance",
                    ),
                ),
                (
                    "status",
                    nautobot.extras.models.statuses.StatusField(
                        on_delete=django.db.models.deletion.PROTECT, to="extras.status"
                    ),
                ),
                ("tags", nautobot.core.models.fields.TagsField(through="extras.TaggedItem", to="extras.Tag")),
            ],
            options={
                "verbose_name": "OSPF Configuration",
                "verbose_name_plural": "OSPF Configurations",
                "unique_together": {("instance", "process_id")},
            },
            bases=(
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
                models.Model,
            ),
        ),
    ]
